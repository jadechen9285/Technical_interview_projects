#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Feb 14 19:25:19 2020@author: jianhongchenThis technical interview project focuses on predicting future sales based on the given features.Problem Type: Regression"""import numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom sklearn import preprocessing plt.style.use("ggplot") # use R ggplot style# load all data settrain_df = pd.read_csv("train.csv")test_df = pd.read_csv("test.csv")sample_df = pd.read_csv("sample_output.csv")# print out some statistics about the data setsprint("Train data size: {}".format(train_df.shape) + "\n" + \      "Train features: {}".format(train_df.columns.tolist()))print(train_df.head())print("Test data size: {}".format(test_df.shape) + "\n" + \      "Test features: {}".format(test_df.columns.tolist()))print("Sample output size: {}".format(sample_df.shape) + "\n" + \      "Sample features: {}".format(sample_df.columns.tolist()))# perform EDA to find pattern for total sales:# normalize total sales and number of sales item by log transformation#train_df['Number_of_Sale_Items'] = np.log(train_df['Number_of_Sale_Items'])min_max_scaler = preprocessing.MinMaxScaler()x = train_df[ ['Number_of_Sale_Items', 'Total_Sales']]x_scaled = min_max_scaler.fit_transform(x)train_scaled = train_dftrain_scaled[['Number_of_Sale_Items','Total_Sales']] = x_scaledtrain_ts = train_scaled.groupby("Date").mean()plt.scatter(x = train_ts['Number_of_Sale_Items'], y = train_ts['Total_Sales'])plt.show()